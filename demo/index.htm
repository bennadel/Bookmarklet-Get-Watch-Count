<!doctype html>
<html ng-app="App">
<head>
	<meta charset="utf-8" />
	<title>
		Counting The Number of Watch Bindings In AngularJS
	</title>
</head>
<body ng-controller="AppController">

	<h1>
		Counting The Number of Watch Bindings In AngularJS
	</h1>

	<p>
		<strong>Bookmarklet</strong>:
		<a bn-bookmarklet="alert('Watch Count:' + (BOOKMARKLET)() );">Get watch count</a>.
	</p>

	<p bn-isolate-scope>
		I have {{ friends.length }} friends!
	</p>

	<ul>
		<li 
			ng-repeat="friend in friends" 
			bn-isolate-scope
			rel="{{ friend.id }}"
			title="aka, {{ friend.nickname }}">

			{{ friend.name }} is my friend; but, I call her <em>{{ friend.nickname }}</em>.

		</li>
	</ul>

	<!-- 
		Isolate scope restrictions are different in AngularJS 1.0.8 (and earlier). So, I
		have this here to test on an earlier version of the framework.
	
		<script type="text/javascript" src="./angular-1.0.8.min.js"></script> 
	-->
	<script type="text/javascript" src="./angular-1.2.22.min.js"></script>
	<script type="text/javascript">

		angular.module( "App", [] ).controller(
			"AppController",
			function( $scope ) {

				$scope.friends = [
					{
						id: 1,
						name: "Tricia",
						nickname: "T-Bone"
					},
					{
						id: 2,
						name: "Sarah",
						nickname: "Stubs"
					},
					{
						id: 3,
						name: "Joanna",
						nickname: "The Boss"
					}
				];

			}
		);

		angular.module( "App" ).directive(
			"bnIsolateScope",
			function() {

				function link( scope, element, attributes ) {

					scope.$watch( "bar", angular.noop );

				}

				return({
					link: link,
					restrict: "A",
					scope: {}
				});

			}
		);

		angular.module( "App" ).directive(
			"bnBookmarklet",
			function( $http ) {

				// I link the JavaScript events to the local scope.
				function link( scope, element, attributes ) {

					// Load the minified JavaScript source for the bookmarklet.
					var codeRequest = $http({
						method: "get",
						url: "../build/watch-count-1.1.min.js",
						cache: false
					});
					
					// When the JavaScript is available, inject it into the bookmarklet.
					codeRequest.then(
						function handleResolve( response ) {

							var href = encodeURIComponent( attributes.bnBookmarklet );
							var code = encodeURIComponent( response.data );
							
							element.attr( 
								"href",
								( "javascript:" + href.replace( "BOOKMARKLET", code ) + ";void(0);" )
							);

						}
					);

				}


				// Return the directive configuration.
				return({
					link: link,
					restrict: "A"
				});

			}
		);

	</script>

</body>
</html>